#                                        thin=10,
#                                        # file='some_stan_model_file.RDS',
#                                        prior = if(exists('priors_to_add') )priors_to_add  else NULL)
# use_these_hypers<-readRDS('best_hypers_lmer.RDS')
# mmm_bayes_wf<-workflow() %>%  add_recipe(recipe3) %>%
#   add_model(bayes_spec,formula=as.formula(built_formula)) %>% finalize_workflow(use_these_hypers) %>% fit(data1)
# saveRDS(mmm_bayes_wf,'best_bayes_mmm.RDS')
recipe3 %>% finalize_recipe(use_these_hypers) %>% prep()-> recipe_finalized
data3<-bake(recipe_finalized ,data1)
#TODO: setup <var>_id columns for every random int!
data3 <-data3 %>% ungroup()
data3$store_id<-rethinking::coerce_index(data3$store)
data3<-data3 %>% select(-store,-product)
rethinking_results<-ulam(formula_list2,
chains=4,iter=4000,
thin=1,
data=data3,
constraints = boundaries,
sample = T,
#pars=c('b_week','a0','store_int',paste0('b_',final_predictors),'big_sigma','int_sigma'),
cmdstan = T,
file='ulam_fit_test_rs',
cores=4,
declare_all_data=F,
messages=F
)
model_text<-if (is.list(rethinking_results)){rethinking_results$model}else{rethinking_results@model}
fileConn<-file("ulam stan rs.stan")
writeLines(model_text, fileConn)
close(fileConn)
data4<-data3
pp<-predict(rethinking_results,data4)
data4$hat<-pp[,1]  #colMeans(link(rethinking_results,data4)$big_model)
rsq(data4,truth = sales,estimate=hat)
ggplot(data4 ,aes(x=sales,y=hat,color=store_id))+
geom_point()+ geom_abline(slope=1,intercept=0)+ggthemes::theme_tufte()+
ggtitle("Predicted vs Actual",subtitle="store 170 looks a bit off . . .")
decomps<-get_decomps_linear()
rethinking_results
rethinking_results@call
rethinking_results@coef
reth2<-readRDS('ulam_fit_test.RDS')
reth2@coef
View(decomp)
View(decomps)
fin_pred<-get_predictors_vector(recipe3)
names(fin_pred)<-NULL
decomps<-get_decomps_linear() %>%rowwise() %>%  mutate(media=sum(c_across(all_of(fin_pred))))
decomps$week<-data1$week
decomps$sales<-data1$sales
decomps$base<-decomps$sales-decomps$media
decomps_natl<-decomps %>% group_by(week) %>% summarise(across(where(is.numeric),sum))
decomps_natl<-decomps_natl %>% pivot_longer(cols=c(-week,-sales,-media))
ggplot(data=decomps_natl,aes(x=week,y=value,fill=name)) + geom_area()+ggthemes::theme_tufte()+
ggtitle("Decomposition By Week")+
theme(legend.position = 'bottom')
data1$preds<-data4$hat
natl_plot<-data1  %>% group_by(week) %>% summarise(across(all_of(c('preds','sales','pred_lmer',
!!final_predictors)),
sum))
natl_plot_long<-natl_plot %>% select(week,preds,pred_lmer,sales) %>%
pivot_longer(c(preds,sales,pred_lmer),values_to='sales') %>%
mutate(name=ifelse(name=='sales','actual',name))
# ggplot(data4 %>% filter(leads<2000),aes(x=week,y=leads,group=store_id))+geom_smooth()
natl_rsq<-round(rsq(natl_plot,truth = sales,estimate=preds)[3],2)
ggplot(natl_plot_long,aes(x=week,y=sales,color=name))+geom_point() +ggthemes::theme_tufte()+
ggtitle("Aggregated Leads, LMER Predicted Leads, and Bayesian Multilevel Leads",
subtitle = paste0("rsq = ",natl_rsq))+
guides(color=  guide_legend(title=NULL))+geom_line()
rsq(data4,truth = sales,estimate=hat)
natl_plot<-data4  %>% group_by(week) %>% summarise(across(all_of(c('preds','sales',
!!final_predictors)),
sum))
natl_plot<-data4  %>% group_by(week) %>% summarise(across(all_of(c('preds','sales',
!!fin_pred)),
sum))
natl_plot<-data4  %>% group_by(week) %>% summarise(across(all_of(c('pred','sales',
!!fin_pred)),
sum))
natl_plot<-data4  %>% group_by(week) %>% summarise(across(all_of(c('hat','sales',
!!fin_pred)),
sum))
natl_plot_long<-natl_plot %>% select(week,preds,pred_lmer,sales) %>%
pivot_longer(c(preds,sales,pred_lmer),values_to='sales') %>%
mutate(name=ifelse(name=='hat','actual',name))
natl_plot_long<-natl_plot %>% select(week,preds,pred_lmer,sales) %>%
pivot_longer(c(hat,sales),values_to='sales') %>%
mutate(name=ifelse(name=='hat','actual',name))
natl_plot_long<-natl_plot %>% select(week,pred,sales) %>%
pivot_longer(c(hat,sales),values_to='sales') %>%
mutate(name=ifelse(name=='hat','actual',name))
natl_plot_long<-natl_plot %>% select(week,hat,sales) %>%
pivot_longer(c(hat,sales),values_to='sales') %>%
mutate(name=ifelse(name=='hat','actual',name))
# ggplot(data4 %>% filter(leads<2000),aes(x=week,y=leads,group=store_id))+geom_smooth()
natl_rsq<-round(rsq(natl_plot,truth = sales,estimate=preds)[3],2)
# ggplot(data4 %>% filter(leads<2000),aes(x=week,y=leads,group=store_id))+geom_smooth()
natl_rsq<-round(rsq(natl_plot,truth = sales,estimate=hat)[3],2)
ggplot(natl_plot_long,aes(x=week,y=sales,color=name))+geom_point() +ggthemes::theme_tufte()+
ggtitle("Aggregated Leads, LMER Predicted Leads, and Bayesian Multilevel Leads",
subtitle = paste0("rsq = ",natl_rsq))+
guides(color=  guide_legend(title=NULL))+geom_line()
natl_plot_long<-natl_plot %>% select(week,hat,sales) %>%
pivot_longer(c(hat,sales),values_to='sales') %>%
mutate(name=ifelse(name=='hat','pred',name))
# ggplot(data4 %>% filter(leads<2000),aes(x=week,y=leads,group=store_id))+geom_smooth()
natl_rsq<-round(rsq(natl_plot,truth = sales,estimate=hat)[3],2)
ggplot(natl_plot_long,aes(x=week,y=sales,color=name))+geom_point() +ggthemes::theme_tufte()+
ggtitle("Aggregated Leads, LMER Predicted Leads, and Bayesian Multilevel Leads",
subtitle = paste0("rsq = ",natl_rsq))+
guides(color=  guide_legend(title=NULL))+geom_line()
natl_plot<-data4  %>% group_by(week) %>% summarise(across(all_of(c('hat','sales',
!!fin_pred)),
sum))
View(natl_plot)
natl_rsq
View(workflow_controls)
add_groups_and_sort<-function(data_to_use=data1,vc=var_controls){
#extract groups from vc
groupings<-vc %>% filter(role2=='group') %>% select(varname) %>% unlist()
names(groupings)<-NULL
time_id_var <-vc%>% filter(role=='time_id') %>% select(varname) %>% unlist()
if(length(groupings)>0){
return(data_to_use %>%  group_by(across(all_of(groupings))) %>%
arrange(across(all_of( c(!!groupings,!!time_id_var)))) %>%
mutate(across(all_of(groupings),as.factor)))
}
else{
return(data_to_use %>% arrange(across(all_of(c(!!time_id_var))) )
) }
}
#TODO: figure out what to do about having the tuning or not in a script -- it blocks
# some of the script flow around lmer preds . .. probably don't need that?
#TODO: reshape this as an example script
#TODO: put more of the tuning steps inside the if tune this time frame -- make a function?
#TODO: create response curves from final model results
#devtools::install_local('C:\\Users\\loren\\Documents\\R\\mostlytidyMMM',force=T)
setwd('C:\\Users\\loren\\Documents\\R\\tidymmm')
librarian::shelf(tidymodels,tune,recipes,multilevelmod,tidyverse,arrow,workflowsets,rethinking,rstan)
#source('tidymodels methods.R')
library(mostlytidyMMM)
source('mmm functions reducing.R')
control_file<-'example model control.xlsx'
#get control spreadsheet
#var_controls -- must have 1 and only 1 role=time_id record
#TODO: write function to perform checkcs on control file: 1) 1 outcome 2) role and role 2 assignment checks 3)
var_controls<-readxl::read_xlsx(control_file,'variables')
transform_controls<-readxl::read_xlsx(control_file,'role controls')
workflow_controls<-readxl::read_xlsx(control_file,"workflow") %>% select(-desc)
tune_this_time<-get_control('tune_this_time')
#read data and get names right;
data1<-data.table::fread("example2.csv") %>%
rename_columns_per_controls()%>% mutate(week=as.Date(week,"%m/%d/%Y"))
data1<-add_fourier_vars(data_to_use=data1,vc=var_controls) %>%
add_groups_and_sort(vc=var_controls)
#read data and get names right;
data1<-data.table::fread("example2.csv") %>%
rename_columns_per_controls()%>% mutate(week=as.Date(week,"%m/%d/%Y"))
names(data1)
data1<-add_fourier_vars(data_to_use=data1,vc=var_controls) %>%
add_groups_and_sort(vc=var_controls)
data1 %>% mutate(across(all_of(c('product','store'),as.factor))))
data1 %>% mutate(across(all_of(c('product','store'),as.factor)))
data1 %>% mutate(across(all_of(c('product','store')),as.factor))
add_groups_and_sort<-function(data_to_use=data1,vc=var_controls){
#extract groups from vc
groupings<-vc %>% filter(role2=='group') %>% select(varname) %>% unlist()
names(groupings)<-NULL
time_id_var <-vc%>% filter(role=='time_id') %>% select(varname) %>% unlist()
if(length(groupings)>0){
data_to_use<-data_to_use%>%
mutate(across(all_of(!!groupings),as.factor))
return(data_to_use %>%  group_by(across(all_of(groupings))) %>%
arrange(across(all_of( c(!!groupings,!!time_id_var)))) )
}
else{
return(data_to_use %>% arrange(across(all_of(c(!!time_id_var))) )
) }
}
data1<-data.table::fread("example2.csv") %>%
rename_columns_per_controls()%>% mutate(week=as.Date(week,"%m/%d/%Y"))
data1<-add_fourier_vars(data_to_use=data1,vc=var_controls) %>%
add_groups_and_sort(vc=var_controls)
str(data1)
rethinking::coerce_index()
rethinking::coerce_index
recipe3b<-recipe3 %>% step_mutate(store_id=rethinking::coerce_index(store))
data3<-bake(recipe3b,data1)
recipe3b<-recipe_finalized %>% step_mutate(store_id=rethinking::coerce_index(store))
data3<-bake(recipe3b,data1)
data3<-bake(prep(recipe3b,data),data1)
data3<-bake(prep(recipe3b,data1),data1)
str(data3)
create_recipe<-function(data_to_use=data1,vc=var_controls){
#start recipe by assigning roles
#  small data is good, going to need to loop over recipe repeatedly, lots of internal copying
# if(adding_trend){
#   #identifyt he time variable and flag if more than 1
#   vc %>% filter(role2=='trend',role=='time_id') %>% select(varname) %>% unlist()->trend_vars
#   if(length(trend_vars)>1){stop('control file asks to add a centered trend but two variables are defined as time predictors.\nCheck the variables tab for role2="trend", role="time_id" and make sure only a single variable is listed' )}
#   if(length(trend_vars)==0){stop('control file asks to add a centered trend but no variable has role="time_id" and role2 = "trend".')}
#   # column_to_change<-data_to_use %>%ungroup() %>%  select(!!trend_vars) %>% unlist() %>% as.numeric()
#   # data_to_use[trend_vars]<-column_to_change
# }
recipe0<-recipe(head(data_to_use,n=1) )
recipe1<-recipe0 %>% bulk_update_role() %>% bulk_add_role()
# if(adding_trend){
#   recipe1<-recipe1 %>% add_role(has_role('trend'),new_role='predictor')# %>% step_center(has_role='trend')
# }else{
# #   #this will remove the trend term from forumals down stream
#   recipe1<-recipe1 %>% update_role(has_role('trend'),new_role='time',old_role='trend')
# }
recipe2<-recipe1 %>% add_steps_media() %>%  step_select(-has_role('postprocess'))
##TODO: test all variations of tune vs fixed -- test alpha, e.g.
recipe3 <-recipe2  %>%# step_center(week) %>%
update_role(c(sin1,sin2,sin3,sin4,sin5,cos1,cos2,cos3,cos4,cos5),new_role='time') %>%
add_role(c(sin1,sin2,sin3,sin4,sin5,cos1,cos2,cos3,cos4,cos5),new_role='predictor') %>%
step_mutate(store_id=as.integer(store))
return(recipe3)
}
recipe3<-create_recipe(data_to_use = data1)#,adding_trend = get_control("add_trend"))
recipe3 %>% finalize_recipe(use_these_hypers) %>% prep()-> recipe_finalized
data3<-bake(recipe_finalized ,data1)
data3$store_id
raw_data4<-head(data1)
raw_data4$store="Albany"
head(data1)
data4<-bake(recipe_finalized,raw_data4)
View(data4)
raw_data4<-head(data1)
raw_data4$store="North"
data4<-bake(recipe_finalized,raw_data4)
View(data4)
raw_data4$store="South"
data4<-bake(recipe_finalized,raw_data4)
unique(data1$store)
str(raw_data4)
raw_data4$store=as.factor("South")
data4<-bake(recipe_finalized,raw_data4)
View(data4)
raw_data4$store=as.factor("Albany")
data4<-bake(recipe_finalized,raw_data4)
View(data4)
create_recipe<-function(data_to_use=data1,vc=var_controls){
#start recipe by assigning roles
#  small data is good, going to need to loop over recipe repeatedly, lots of internal copying
# if(adding_trend){
#   #identifyt he time variable and flag if more than 1
#   vc %>% filter(role2=='trend',role=='time_id') %>% select(varname) %>% unlist()->trend_vars
#   if(length(trend_vars)>1){stop('control file asks to add a centered trend but two variables are defined as time predictors.\nCheck the variables tab for role2="trend", role="time_id" and make sure only a single variable is listed' )}
#   if(length(trend_vars)==0){stop('control file asks to add a centered trend but no variable has role="time_id" and role2 = "trend".')}
#   # column_to_change<-data_to_use %>%ungroup() %>%  select(!!trend_vars) %>% unlist() %>% as.numeric()
#   # data_to_use[trend_vars]<-column_to_change
# }
groupings<-as.character(groups(data_to_use))
recipe0<-recipe(head(data_to_use,n=1) )
recipe1<-recipe0 %>% bulk_update_role() %>% bulk_add_role()
# if(adding_trend){
#   recipe1<-recipe1 %>% add_role(has_role('trend'),new_role='predictor')# %>% step_center(has_role='trend')
# }else{
# #   #this will remove the trend term from forumals down stream
#   recipe1<-recipe1 %>% update_role(has_role('trend'),new_role='time',old_role='trend')
# }
recipe2<-recipe1 %>% add_steps_media() %>%  step_select(-has_role('postprocess'))
##TODO: test all variations of tune vs fixed -- test alpha, e.g.
recipe3 <-recipe2  %>%# step_center(week) %>%
update_role(c(sin1,sin2,sin3,sin4,sin5,cos1,cos2,cos3,cos4,cos5),new_role='time') %>%
add_role(c(sin1,sin2,sin3,sin4,sin5,cos1,cos2,cos3,cos4,cos5),new_role='predictor') %>%
step_novel(all_of(!!groupings)) %>%
step_mutate(store_id=as.integer(store))
return(recipe3)
}
recipe3<-create_recipe(data_to_use = data1)#,adding_trend = get_control("add_trend"))
recipe3 %>% finalize_recipe(use_these_hypers) %>% prep()-> recipe_finalized
data3<-bake(recipe_finalized ,data1)
raw_data4<-head(data1)
raw_data4$store=as.factor("Albany")
data4<-bake(recipe_finalized,raw_data4)
View(data4)
raw_data4<-head(data1)
raw_data4$store=as.factor("North")
data4<-bake(recipe_finalized,raw_data4)
#TODO: setup <var>_id columns for
View(data4)
raw_data4$store=as.factor("South")
data4<-bake(recipe_finalized,raw_data4)
View(data4)
create_recipe<-function(data_to_use=data1,vc=var_controls){
#start recipe by assigning roles
#  small data is good, going to need to loop over recipe repeatedly, lots of internal copying
# if(adding_trend){
#   #identifyt he time variable and flag if more than 1
#   vc %>% filter(role2=='trend',role=='time_id') %>% select(varname) %>% unlist()->trend_vars
#   if(length(trend_vars)>1){stop('control file asks to add a centered trend but two variables are defined as time predictors.\nCheck the variables tab for role2="trend", role="time_id" and make sure only a single variable is listed' )}
#   if(length(trend_vars)==0){stop('control file asks to add a centered trend but no variable has role="time_id" and role2 = "trend".')}
#   # column_to_change<-data_to_use %>%ungroup() %>%  select(!!trend_vars) %>% unlist() %>% as.numeric()
#   # data_to_use[trend_vars]<-column_to_change
# }
groupings<-as.character(groups(data_to_use))
recipe0<-recipe(head(data_to_use,n=1) )
recipe1<-recipe0 %>% bulk_update_role() %>% bulk_add_role()
# if(adding_trend){
#   recipe1<-recipe1 %>% add_role(has_role('trend'),new_role='predictor')# %>% step_center(has_role='trend')
# }else{
# #   #this will remove the trend term from forumals down stream
#   recipe1<-recipe1 %>% update_role(has_role('trend'),new_role='time',old_role='trend')
# }
recipe2<-recipe1 %>% add_steps_media() %>%  step_select(-has_role('postprocess'))
##TODO: test all variations of tune vs fixed -- test alpha, e.g.
recipe3 <-recipe2  %>%# step_center(week) %>%
update_role(c(sin1,sin2,sin3,sin4,sin5,cos1,cos2,cos3,cos4,cos5),new_role='time') %>%
add_role(c(sin1,sin2,sin3,sin4,sin5,cos1,cos2,cos3,cos4,cos5),new_role='predictor') %>%
step_novel(all_of(!!groupings)) %>%
step_mutate(across(all_of(!!groupings),as.integer))
return(recipe3)
}
recipe3<-create_recipe(data_to_use = data1)#,adding_trend = get_control("add_trend"))
recipe3 %>% finalize_recipe(use_these_hypers) %>% prep()-> recipe_finalized
recipe3 %>% finalize_recipe(use_these_hypers) %>% prep()-> recipe_finalized
create_recipe<-function(data_to_use=data1,vc=var_controls){
#start recipe by assigning roles
#  small data is good, going to need to loop over recipe repeatedly, lots of internal copying
# if(adding_trend){
#   #identifyt he time variable and flag if more than 1
#   vc %>% filter(role2=='trend',role=='time_id') %>% select(varname) %>% unlist()->trend_vars
#   if(length(trend_vars)>1){stop('control file asks to add a centered trend but two variables are defined as time predictors.\nCheck the variables tab for role2="trend", role="time_id" and make sure only a single variable is listed' )}
#   if(length(trend_vars)==0){stop('control file asks to add a centered trend but no variable has role="time_id" and role2 = "trend".')}
#   # column_to_change<-data_to_use %>%ungroup() %>%  select(!!trend_vars) %>% unlist() %>% as.numeric()
#   # data_to_use[trend_vars]<-column_to_change
# }
groupings<-as.character(groups(data_to_use))
recipe0<-recipe(head(data_to_use,n=1) )
recipe1<-recipe0 %>% bulk_update_role() %>% bulk_add_role()
# if(adding_trend){
#   recipe1<-recipe1 %>% add_role(has_role('trend'),new_role='predictor')# %>% step_center(has_role='trend')
# }else{
# #   #this will remove the trend term from forumals down stream
#   recipe1<-recipe1 %>% update_role(has_role('trend'),new_role='time',old_role='trend')
# }
recipe2<-recipe1 %>% add_steps_media() %>%  step_select(-has_role('postprocess'))
##TODO: test all variations of tune vs fixed -- test alpha, e.g.
recipe3 <-recipe2  %>%# step_center(week) %>%
update_role(c(sin1,sin2,sin3,sin4,sin5,cos1,cos2,cos3,cos4,cos5),new_role='time') %>%
add_role(c(sin1,sin2,sin3,sin4,sin5,cos1,cos2,cos3,cos4,cos5),new_role='predictor') %>%
step_novel(all_of(!!groupings)) %>%
step_mutate(across(!!groupings,as.integer))
return(recipe3)
}
recipe3<-create_recipe(data_to_use = data1)#,adding_trend = get_control("add_trend"))
recipe3 %>% finalize_recipe(use_these_hypers) %>% prep()-> recipe_finalized
create_recipe<-function(data_to_use=data1,vc=var_controls){
#start recipe by assigning roles
#  small data is good, going to need to loop over recipe repeatedly, lots of internal copying
# if(adding_trend){
#   #identifyt he time variable and flag if more than 1
#   vc %>% filter(role2=='trend',role=='time_id') %>% select(varname) %>% unlist()->trend_vars
#   if(length(trend_vars)>1){stop('control file asks to add a centered trend but two variables are defined as time predictors.\nCheck the variables tab for role2="trend", role="time_id" and make sure only a single variable is listed' )}
#   if(length(trend_vars)==0){stop('control file asks to add a centered trend but no variable has role="time_id" and role2 = "trend".')}
#   # column_to_change<-data_to_use %>%ungroup() %>%  select(!!trend_vars) %>% unlist() %>% as.numeric()
#   # data_to_use[trend_vars]<-column_to_change
# }
groupings<-as.character(groups(data_to_use))
recipe0<-recipe(head(data_to_use,n=1) )
recipe1<-recipe0 %>% bulk_update_role() %>% bulk_add_role()
# if(adding_trend){
#   recipe1<-recipe1 %>% add_role(has_role('trend'),new_role='predictor')# %>% step_center(has_role='trend')
# }else{
# #   #this will remove the trend term from forumals down stream
#   recipe1<-recipe1 %>% update_role(has_role('trend'),new_role='time',old_role='trend')
# }
recipe2<-recipe1 %>% add_steps_media() %>%  step_select(-has_role('postprocess'))
##TODO: test all variations of tune vs fixed -- test alpha, e.g.
recipe3 <-recipe2  %>%# step_center(week) %>%
update_role(c(sin1,sin2,sin3,sin4,sin5,cos1,cos2,cos3,cos4,cos5),new_role='time') %>%
add_role(c(sin1,sin2,sin3,sin4,sin5,cos1,cos2,cos3,cos4,cos5),new_role='predictor') %>%
step_novel(all_of(!!groupings)) %>%
step_mutate(across(all_of(c('product','store')),as.integer))
return(recipe3)
}
recipe3<-create_recipe(data_to_use = data1)#,adding_trend = get_control("add_trend"))
recipe3 %>% finalize_recipe(use_these_hypers) %>% prep()-> recipe_finalized
create_recipe<-function(data_to_use=data1,vc=var_controls){
#start recipe by assigning roles
#  small data is good, going to need to loop over recipe repeatedly, lots of internal copying
# if(adding_trend){
#   #identifyt he time variable and flag if more than 1
#   vc %>% filter(role2=='trend',role=='time_id') %>% select(varname) %>% unlist()->trend_vars
#   if(length(trend_vars)>1){stop('control file asks to add a centered trend but two variables are defined as time predictors.\nCheck the variables tab for role2="trend", role="time_id" and make sure only a single variable is listed' )}
#   if(length(trend_vars)==0){stop('control file asks to add a centered trend but no variable has role="time_id" and role2 = "trend".')}
#   # column_to_change<-data_to_use %>%ungroup() %>%  select(!!trend_vars) %>% unlist() %>% as.numeric()
#   # data_to_use[trend_vars]<-column_to_change
# }
groupings<-as.character(groups(data_to_use))
recipe0<-recipe(head(data_to_use,n=1) )
recipe1<-recipe0 %>% bulk_update_role() %>% bulk_add_role()
# if(adding_trend){
#   recipe1<-recipe1 %>% add_role(has_role('trend'),new_role='predictor')# %>% step_center(has_role='trend')
# }else{
# #   #this will remove the trend term from forumals down stream
#   recipe1<-recipe1 %>% update_role(has_role('trend'),new_role='time',old_role='trend')
# }
recipe2<-recipe1 %>% add_steps_media() %>%  step_select(-has_role('postprocess'))
##TODO: test all variations of tune vs fixed -- test alpha, e.g.
recipe3 <-recipe2  %>%# step_center(week) %>%
update_role(c(sin1,sin2,sin3,sin4,sin5,cos1,cos2,cos3,cos4,cos5),new_role='time') %>%
add_role(c(sin1,sin2,sin3,sin4,sin5,cos1,cos2,cos3,cos4,cos5),new_role='predictor') %>%
step_novel(all_of(!!groupings)) %>%
step_mutate(has_role('group'),as.integer)
return(recipe3)
}
recipe3<-create_recipe(data_to_use = data1)#,adding_trend = get_control("add_trend"))
recipe3 %>% finalize_recipe(use_these_hypers) %>% prep()-> recipe_finalized
create_recipe<-function(data_to_use=data1,vc=var_controls){
#start recipe by assigning roles
#  small data is good, going to need to loop over recipe repeatedly, lots of internal copying
# if(adding_trend){
#   #identifyt he time variable and flag if more than 1
#   vc %>% filter(role2=='trend',role=='time_id') %>% select(varname) %>% unlist()->trend_vars
#   if(length(trend_vars)>1){stop('control file asks to add a centered trend but two variables are defined as time predictors.\nCheck the variables tab for role2="trend", role="time_id" and make sure only a single variable is listed' )}
#   if(length(trend_vars)==0){stop('control file asks to add a centered trend but no variable has role="time_id" and role2 = "trend".')}
#   # column_to_change<-data_to_use %>%ungroup() %>%  select(!!trend_vars) %>% unlist() %>% as.numeric()
#   # data_to_use[trend_vars]<-column_to_change
# }
groupings<-as.character(groups(data_to_use))
print(groupings)
recipe0<-recipe(head(data_to_use,n=1) )
recipe1<-recipe0 %>% bulk_update_role() %>% bulk_add_role()
# if(adding_trend){
#   recipe1<-recipe1 %>% add_role(has_role('trend'),new_role='predictor')# %>% step_center(has_role='trend')
# }else{
# #   #this will remove the trend term from forumals down stream
#   recipe1<-recipe1 %>% update_role(has_role('trend'),new_role='time',old_role='trend')
# }
recipe2<-recipe1 %>% add_steps_media() %>%  step_select(-has_role('postprocess'))
##TODO: test all variations of tune vs fixed -- test alpha, e.g.
recipe3 <-recipe2  %>%# step_center(week) %>%
update_role(c(sin1,sin2,sin3,sin4,sin5,cos1,cos2,cos3,cos4,cos5),new_role='time') %>%
add_role(c(sin1,sin2,sin3,sin4,sin5,cos1,cos2,cos3,cos4,cos5),new_role='predictor') %>%
step_novel(all_of(!!groupings)) %>%
step_mutate_at(all_of(!!groupings),as.integer)
return(recipe3)
}
recipe3<-create_recipe(data_to_use = data1)#,adding_trend = get_control("add_trend"))
create_recipe<-function(data_to_use=data1,vc=var_controls){
#start recipe by assigning roles
#  small data is good, going to need to loop over recipe repeatedly, lots of internal copying
# if(adding_trend){
#   #identifyt he time variable and flag if more than 1
#   vc %>% filter(role2=='trend',role=='time_id') %>% select(varname) %>% unlist()->trend_vars
#   if(length(trend_vars)>1){stop('control file asks to add a centered trend but two variables are defined as time predictors.\nCheck the variables tab for role2="trend", role="time_id" and make sure only a single variable is listed' )}
#   if(length(trend_vars)==0){stop('control file asks to add a centered trend but no variable has role="time_id" and role2 = "trend".')}
#   # column_to_change<-data_to_use %>%ungroup() %>%  select(!!trend_vars) %>% unlist() %>% as.numeric()
#   # data_to_use[trend_vars]<-column_to_change
# }
groupings<-as.character(groups(data_to_use))
print(groupings)
recipe0<-recipe(head(data_to_use,n=1) )
recipe1<-recipe0 %>% bulk_update_role() %>% bulk_add_role()
# if(adding_trend){
#   recipe1<-recipe1 %>% add_role(has_role('trend'),new_role='predictor')# %>% step_center(has_role='trend')
# }else{
# #   #this will remove the trend term from forumals down stream
#   recipe1<-recipe1 %>% update_role(has_role('trend'),new_role='time',old_role='trend')
# }
recipe2<-recipe1 %>% add_steps_media() %>%  step_select(-has_role('postprocess'))
##TODO: test all variations of tune vs fixed -- test alpha, e.g.
recipe3 <-recipe2  %>%# step_center(week) %>%
update_role(c(sin1,sin2,sin3,sin4,sin5,cos1,cos2,cos3,cos4,cos5),new_role='time') %>%
add_role(c(sin1,sin2,sin3,sin4,sin5,cos1,cos2,cos3,cos4,cos5),new_role='predictor') %>%
step_novel(all_of(!!groupings)) %>%
step_mutate_at(all_of(!!groupings),fn=list(id=as.integer))
return(recipe3)
}
recipe3<-create_recipe(data_to_use = data1)#,adding_trend = get_control("add_trend"))
recipe3 %>% finalize_recipe(use_these_hypers) %>% prep()-> recipe_finalized
data3<-bake(recipe_finalized ,data1)
names(data3)
View(data3)
raw_data4<-head(data1)
raw_data4$store=as.factor("South")
data4<-bake(recipe_finalized,raw_data4)
data4
View(data4)
raw_data4$store=as.factor("Albany")
data4<-bake(recipe_finalized,raw_data4)
View(data4)
pp<-predict(rethinking_results,data4)
pp
nrow(data4)
link(rethinking_results,data4,n=10)
data4$store_id=NAN
data4$store_id=NaN
pp<-predict(rethinking_results,data4)
pp
link(rethinking_results,data4,n=10)
?rethinking::coerce_index
data5<-bake(recipe_finalized,raw_data4)
data5$store_id
pp<-predict(rethinking_results,data5)
pp
pp<-predict.ulam(rethinking_results,data5)
pp
link(rethinking_results,data5,n=1)
?link
data5$store_id=0
link(rethinking_results,data5,n=1)
pp<-predict.ulam(rethinking_results,data5)
pp
link(rethinking_results,data5)
data5$store_id=NULL
link(rethinking_results,data5)
source("~/R/tidymmm/tidymmm.R")
