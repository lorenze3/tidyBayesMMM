where ((CURRENT_DATE-a.start_date) <={days_back_to_include} or (CURRENT_DATE-a.completion_date) <= {days_back_to_include}) and
(a.phase ilike '%2%' or a.phase ilike '%3%') and c.minimum_age_num>={minimum_age};;"
)
con <- dbConnect(drv, dbname="aact",host="aact-db.ctti-clinicaltrials.org", port=5432, user=uid, password=pwd)
oneperstudy<- dbGetQuery(con, qry1perstudy) #one per study is the one-record per table of included studies
dbDisconnect(con)
View(oneperstudy)
getwd()
setwd("C:\Users\loren\Document")
install.packages('tidytable')
vignette("share-on-a-github-website", package = "fusen")
?fusen::init_share_on_github
remotes::install_github("ThinkR-open/fusen")
vignette("share-on-a-github-website", package = "fusen")
?usethis::create_github_token
usethis::create_github_token()
gitcreds::gitcreds_set()
devtools::install_local('C:\\Users\\loren\\Documents\\R\\mostlytidyMMM',force=T)
?mostlytidyMMM::assemble_workflow()
?create_recipe
?mostlytidyMMM::make_bound_statements
?mostlytidyMMM::make_list_of_fft_formulae
#model discovery walk through
#TODO: add the random effects bit to a function
#TODO: add the hyper pararms  + seasonality part to a funciton
#TODO: make a function to start a control file from a data table
#devtools::install_local('C:\\Users\\loren\\Documents\\R\\mostlytidyMMM',force=T)
setwd('C:\\Users\\loren\\Documents\\R\\tidymmm')
librarian::shelf(tidymodels,tune,recipes,multilevelmod,tidyverse,arrow,workflowsets,rethinking,rstan)
#source('tidymodels methods.R')
library(mostlytidyMMM)
source('mmm functions reducing.R')
control_file<-'example_model_control_stages.xlsx'
#get control spreadsheet
#var_controls -- must have 1 and only 1 role=time_id record
#TODO: write function to perform checkcs on control file: 1) 1 outcome 2) role and role 2 assignment checks 3)
var_controls<-readxl::read_xlsx(control_file,'variables')
transform_controls<-readxl::read_xlsx(control_file,'role controls')
workflow_controls<-readxl::read_xlsx(control_file,"workflow") %>% select(-desc)
#ok, the recipe contains adstock and saturation transformation parameters or
#hyperapameter tuning selections
#but the model formula controls which terms have random slopes and which don't, and
#how many fourier terms are used
# we will tune the adstock and saturation while determining number of fft_terms to use
#read data and get names right;
data1<-data.table::fread("example2.csv") %>%
rename_columns_per_controls()%>% mutate(week=as.Date(week,"%m/%d/%Y"))
data1<-add_fourier_vars(data_to_use=data1,vc=var_controls) %>%
add_groups_and_sort(vc=var_controls)
#
recipe3<-create_recipe(data_to_use = data1,vc=var_controls,mc=transform_controls)
#need to create formulas with 0 to fft_terms pairs of sins and cos
#and with/without interaction
fft_formulae0<-make_list_of_fft_formulae(workflow_controls,recipe3)
formulae<-fft_formulae0[[1]]
configs_fft_options<-fft_formulae0[[2]]
names(formulae)<-as.character(1:length(formulae))
list_of_flows<-lapply(formulae,assemble_workflow)
tune_all_these<-as_workflow_set(!!!list_of_flows)
data1<-data1 |>mutate(combo_id= paste0(store,'_',product))
fft_selecting_tune<-workflow_map(tune_all_these,grid=25,resamples=vfold_cv(data1,v=2,strata=combo_id))
id_of_best<-rank_results(fft_selecting_tune,rank_metric="rmse",select_best=F) %>%
select(wflow_id) %>% slice_head(n=1) %>% unlist()
hyper_parms<-select_best(
extract_workflow_set_result(fft_selecting_tune,id=id_of_best),metric='rmse')
best_seas_vc<-configs_fft_options[[as.numeric(id_of_best)]]
best_seas_formula<-formulae[[as.numeric(id_of_best)]]
# autoplot(fft_selecting_tune,metric='rmse')
#let's keep these hyperparms, but try the random effects
hyper_parms_finalized=recipe3 %>% finalize_recipe(hyper_parms)
list_of_formulae_rands<-make_list_of_rands_formula()
list_of_flows2<-lapply(list_of_formulae_rands,assemble_workflow,hyper_parms_finalized)
names(list_of_flows2)<-as.character(1:length(list_of_formulae_rands))
tune_all_these2<-as_workflow_set(!!!list_of_flows2)
rands_selecting_tune<-workflow_map(tune_all_these2,grid=1,resamples=vfold_cv(data1,v=2,strata=combo_id))
rank_results(rands_selecting_tune)
id_of_best_rand<-rank_results(rands_selecting_tune,rank_metric="rmse",select_best=T) %>%
select(wflow_id) %>% slice_head(n=1) %>% unlist()
best_formula<-list_of_formulae_rands[[as.numeric(id_of_best_rand)]][1]
wc=workflow_controls
get_control('tune_this_time',wc)
#' @param wc defaults to workflow_controls; a tibble with R_name and Value columns
#' where R_name holds control names expected by several of this package's functions
#' and Value is the value of those controls
#' @export
#'
#' @example
#'
#' @return a recipe with roles, adstock and saturation steps defined by controls table
#'
#' @importsFrom recipes
create_recipe<-function(data_to_use=data1,vc=var_controls,mc=transform_controls,
wc=workflow_controls){
#start recipe by assigning roles
#  small data is good, going to need to loop over recipe repeatedly, lots of internal copying
# if(adding_trend){
#   #identifyt he time variable and flag if more than 1
#   vc |> filter(role2=='trend',role=='time_id') |> select(varname) |> unlist()->trend_vars
#   if(length(trend_vars)>1){stop('control file asks to add a centered trend but two variables are defined as time predictors.\nCheck the variables tab for role2="trend", role="time_id" and make sure only a single variable is listed' )}
#   if(length(trend_vars)==0){stop('control file asks to add a centered trend but no variable has role="time_id" and role2 = "trend".')}
#   # column_to_change<-data_to_use |>ungroup() |>  select(!!trend_vars) |> unlist() |> as.numeric()
#   # data_to_use[trend_vars]<-column_to_change
# }
groupings<-as.character(groups(data_to_use))
recipe0<-recipe(head(data_to_use,n=1) )
recipe1<-recipe0 |> bulk_update_role() |> bulk_add_role()
# if(adding_trend){
#   recipe1<-recipe1 |> add_role(has_role('trend'),new_role='predictor')# |> step_center(has_role='trend')
# }else{
# #   #this will remove the trend term from forumals down stream
#   recipe1<-recipe1 |> update_role(has_role('trend'),new_role='time',old_role='trend')
# }
recipe2<-recipe1 |> add_steps_media(var_specific_controls=vc,media_controls=mc) |>  step_select(-has_role('postprocess'))
##TODO: test all variations of tune vs fixed -- test alpha, e.g.
recipe3 <-recipe2  |># step_center(week) |>
update_role(c(sin1,sin2,sin3,sin4,sin5,cos1,cos2,cos3,cos4,cos5),new_role='time') |>
add_role(c(sin1,sin2,sin3,sin4,sin5,cos1,cos2,cos3,cos4,cos5),new_role='predictor') |>
step_novel(all_of(!!groupings)) |>
step_mutate_at(all_of(!!groupings),fn=list(id=as.integer))
if(get_control('tune_this_time',wc)=='FALSE'){
recipe3<-recipe3|>tune::finalize_recipe(readRDS(get_control('saved_hypers_filename',wc)))
}
return(recipe3)
}
saveRDS(hyper_parms,'saved_hypers.RDS')
#' @param wc defaults to workflow_controls; a tibble with R_name and Value columns
#' where R_name holds control names expected by several of this package's functions
#' and Value is the value of those controls
#' @export
#'
#' @example
#'
#' @return a recipe with roles, adstock and saturation steps defined by controls table
#'
#' @importsFrom recipes
create_recipe<-function(data_to_use=data1,vc=var_controls,mc=transform_controls,
wc=workflow_controls){
#start recipe by assigning roles
#  small data is good, going to need to loop over recipe repeatedly, lots of internal copying
# if(adding_trend){
#   #identifyt he time variable and flag if more than 1
#   vc |> filter(role2=='trend',role=='time_id') |> select(varname) |> unlist()->trend_vars
#   if(length(trend_vars)>1){stop('control file asks to add a centered trend but two variables are defined as time predictors.\nCheck the variables tab for role2="trend", role="time_id" and make sure only a single variable is listed' )}
#   if(length(trend_vars)==0){stop('control file asks to add a centered trend but no variable has role="time_id" and role2 = "trend".')}
#   # column_to_change<-data_to_use |>ungroup() |>  select(!!trend_vars) |> unlist() |> as.numeric()
#   # data_to_use[trend_vars]<-column_to_change
# }
groupings<-as.character(groups(data_to_use))
recipe0<-recipe(head(data_to_use,n=1) )
recipe1<-recipe0 |> bulk_update_role() |> bulk_add_role()
# if(adding_trend){
#   recipe1<-recipe1 |> add_role(has_role('trend'),new_role='predictor')# |> step_center(has_role='trend')
# }else{
# #   #this will remove the trend term from forumals down stream
#   recipe1<-recipe1 |> update_role(has_role('trend'),new_role='time',old_role='trend')
# }
recipe2<-recipe1 |> add_steps_media(var_specific_controls=vc,media_controls=mc) |>  step_select(-has_role('postprocess'))
##TODO: test all variations of tune vs fixed -- test alpha, e.g.
recipe3 <-recipe2  |># step_center(week) |>
update_role(c(sin1,sin2,sin3,sin4,sin5,cos1,cos2,cos3,cos4,cos5),new_role='time') |>
add_role(c(sin1,sin2,sin3,sin4,sin5,cos1,cos2,cos3,cos4,cos5),new_role='predictor') |>
step_novel(all_of(!!groupings)) |>
step_mutate_at(all_of(!!groupings),fn=list(id=as.integer))
if(get_control('tune_this_time',wc)=='FALSE'){
recipe3<-recipe3|>tune::finalize_recipe(readRDS(get_control('saved_hypers_filename',wc)))
}
return(recipe3)
}
workflow
workflow_controls
workflow_controls<-readxl::read_xlsx(control_file,"workflow") %>% select(-desc)
workflow_controls
#
recipe3<-create_recipe(data_to_use = data1,vc=var_controls,mc=transform_controls,wc=workflow_controls)
recipe3
names(data1)
#model discovery walk through
#TODO: add the random effects bit to a function
#TODO: add the hyper pararms  + seasonality part to a funciton
#TODO: make a function to start a control file from a data table
#devtools::install_local('C:\\Users\\loren\\Documents\\R\\mostlytidyMMM',force=T)
setwd('C:\\Users\\loren\\Documents\\R\\tidymmm')
librarian::shelf(tidymodels,tune,recipes,multilevelmod,tidyverse,arrow,workflowsets,rethinking,rstan)
#source('tidymodels methods.R')
library(mostlytidyMMM)
source('mmm functions reducing.R')
control_file<-'example_model_control_stages.xlsx'
#get control spreadsheet
#var_controls -- must have 1 and only 1 role=time_id record
#TODO: write function to perform checkcs on control file: 1) 1 outcome 2) role and role 2 assignment checks 3)
var_controls<-readxl::read_xlsx(control_file,'variables')
transform_controls<-readxl::read_xlsx(control_file,'role controls')
workflow_controls<-readxl::read_xlsx(control_file,"workflow") %>% select(-desc)
#ok, the recipe contains adstock and saturation transformation parameters or
#hyperapameter tuning selections
#but the model formula controls which terms have random slopes and which don't, and
#how many fourier terms are used
# we will tune the adstock and saturation while determining number of fft_terms to use
#read data and get names right;
data1<-data.table::fread("example2.csv") %>%
rename_columns_per_controls()%>% mutate(week=as.Date(week,"%m/%d/%Y"))
data1<-add_fourier_vars(data_to_use=data1,vc=var_controls) %>%
add_groups_and_sort(vc=var_controls)
#
recipe3<-create_recipe(data_to_use = data1,vc=var_controls,mc=transform_controls,wc=workflow_controls)
#need to create formulas with 0 to fft_terms pairs of sins and cos
#and with/without interaction
fft_formulae0<-make_list_of_fft_formulae(workflow_controls,recipe3)
formulae<-fft_formulae0[[1]]
configs_fft_options<-fft_formulae0[[2]]
names(formulae)<-as.character(1:length(formulae))
list_of_flows<-lapply(formulae,assemble_workflow)
tune_all_these<-as_workflow_set(!!!list_of_flows)
data1<-data1 |>mutate(combo_id= paste0(store,'_',product))
fft_selecting_tune<-workflow_map(tune_all_these,grid=25,resamples=vfold_cv(data1,v=2,strata=combo_id))
id_of_best<-rank_results(fft_selecting_tune,rank_metric="rmse",select_best=F) %>%
select(wflow_id) %>% slice_head(n=1) %>% unlist()
hyper_parms<-select_best(
extract_workflow_set_result(fft_selecting_tune,id=id_of_best),metric='rmse')
hyper_parms
readRDS()
sh<-readRDS('saved_hypers.RDS')
class(sh)
sh
tunable(recipe3)
recipe3 %>% prep()
prep
prep.recipe
showMethods('prep')
methods(prep)
prep.step_adstock()
prep.step_adstock
?assemble_workflow
recipe3
workflow_controls<-readxl::read_xlsx(control_file,"workflow") %>% select(-desc)
data1<-data.table::fread("example2.csv") %>%
rename_columns_per_controls()%>% mutate(week=as.Date(week,"%m/%d/%Y"))
data1<-add_fourier_vars(data_to_use=data1,vc=var_controls) %>%
add_groups_and_sort(vc=var_controls)
#
recipe3<-create_recipe(data_to_use = data1,vc=var_controls,mc=transform_controls,wc=workflow_controls)
prep(recipe3)
?is_tune
??`is_tune
``
``
??is_tune
tunable.check(recipe3)
?tune::tunable
prep(recipe3)
check_for_tune<-prep(recipe3)
check_for_tune
tryCatch(prep(recipe3))
?tryCatch
tryCatch(prep(recipe3),error=function(e) return(TRUE) )
check_if_needs_tune<-tryCatch(prep(recipe3),error=function(e) return(TRUE) )
check_if_needs_tune<-function(recipe_to_check){
tryCatch({prep(recipe3)
FALSE},error=function(e) return(TRUE) )
}
check_if_needs_tune(recipe3)
#model discovery walk through
#TODO: add the random effects bit to a function
#TODO: add the hyper pararms  + seasonality part to a funciton
#TODO: make a function to start a control file from a data table
#devtools::install_local('C:\\Users\\loren\\Documents\\R\\mostlytidyMMM',force=T)
setwd('C:\\Users\\loren\\Documents\\R\\tidymmm')
librarian::shelf(tidymodels,tune,recipes,multilevelmod,tidyverse,arrow,workflowsets,rethinking,rstan)
#source('tidymodels methods.R')
library(mostlytidyMMM)
source('mmm functions reducing.R')
control_file<-'example_model_control_stages.xlsx'
#get control spreadsheet
#var_controls -- must have 1 and only 1 role=time_id record
#TODO: write function to perform checkcs on control file: 1) 1 outcome 2) role and role 2 assignment checks 3)
var_controls<-readxl::read_xlsx(control_file,'variables')
transform_controls<-readxl::read_xlsx(control_file,'role controls')
workflow_controls<-readxl::read_xlsx(control_file,"workflow") %>% select(-desc)
#ok, the recipe contains adstock and saturation transformation parameters or
#hyperapameter tuning selections
#but the model formula controls which terms have random slopes and which don't, and
#how many fourier terms are used
# we will tune the adstock and saturation while determining number of fft_terms to use
#read data and get names right;
data1<-data.table::fread("example2.csv") %>%
rename_columns_per_controls()%>% mutate(week=as.Date(week,"%m/%d/%Y"))
data1<-add_fourier_vars(data_to_use=data1,vc=var_controls) %>%
add_groups_and_sort(vc=var_controls)
#
recipe3<-create_recipe(data_to_use = data1,vc=var_controls,mc=transform_controls,wc=workflow_controls)
check_if_needs_tune<-function(recipe_to_check){
tryCatch({prep(recipe3)
FALSE},error=function(e) return(TRUE) )
}
check_if_needs_tune(recipe3)
setwd('C:\\Users\\loren\\Documents\\R\\tidymmm')
librarian::shelf(tidymodels,tune,recipes,multilevelmod,tidyverse,arrow,workflowsets,rethinking,rstan)
#source('tidymodels methods.R')
library(mostlytidyMMM)
source('mmm functions reducing.R')
control_file<-'example_model_control_stages.xlsx'
#get control spreadsheet
#var_controls -- must have 1 and only 1 role=time_id record
#TODO: write function to perform checkcs on control file: 1) 1 outcome 2) role and role 2 assignment checks 3)
var_controls<-readxl::read_xlsx(control_file,'variables')
transform_controls<-readxl::read_xlsx(control_file,'role controls')
workflow_controls<-readxl::read_xlsx(control_file,"workflow") %>% select(-desc)
#ok, the recipe contains adstock and saturation transformation parameters or
#hyperapameter tuning selections
#but the model formula controls which terms have random slopes and which don't, and
#how many fourier terms are used
# we will tune the adstock and saturation while determining number of fft_terms to use
#read data and get names right;
data1<-data.table::fread("example2.csv") %>%
rename_columns_per_controls()%>% mutate(week=as.Date(week,"%m/%d/%Y"))
data1<-add_fourier_vars(data_to_use=data1,vc=var_controls) %>%
add_groups_and_sort(vc=var_controls)
#
recipe3<-create_recipe(data_to_use = data1,vc=var_controls,mc=transform_controls,wc=workflow_controls)
tryCatch({prep(recipe3)
FALSE},error=function(e) return(e)
)
ff<-tryCatch({prep(recipe3)
FALSE},error=function(e) return(e) )
ff
names(ff)
ff$message
grepl("Argument(s) with `tune()`:",ff$message)
grepl("Argument(s) with `tune()`:",ff$message,fixed=T)
check_if_needs_tune<-function(recipe_to_check){
tryCatch({prep(recipe3)
FALSE},error=function(e) {
if(grepl("Argument(s) with `tune()`:",e$message,fixed=T))
return(TRUE) })
}
check_if_needs_tune(recipe3)
check_if_needs_tune<-function(recipe_to_check){
tryCatch({prep(recipe3)
FALSE},error=function(e) {
if(grepl("Argument(s) with `tune()`:",e$message,fixed=T))
return(TRUE) })
}
#model discovery walk through
#TODO: add the random effects bit to a function
#TODO: add the hyper pararms  + seasonality part to a funciton
#TODO: make a function to start a control file from a data table
#devtools::install_local('C:\\Users\\loren\\Documents\\R\\mostlytidyMMM',force=T)
setwd('C:\\Users\\loren\\Documents\\R\\tidymmm')
librarian::shelf(tidymodels,tune,recipes,multilevelmod,tidyverse,arrow,workflowsets,rethinking,rstan)
#source('tidymodels methods.R')
library(mostlytidyMMM)
source('mmm functions reducing.R')
control_file<-'example_model_control_stages.xlsx'
#get control spreadsheet
#var_controls -- must have 1 and only 1 role=time_id record
#TODO: write function to perform checkcs on control file: 1) 1 outcome 2) role and role 2 assignment checks 3)
var_controls<-readxl::read_xlsx(control_file,'variables')
transform_controls<-readxl::read_xlsx(control_file,'role controls')
workflow_controls<-readxl::read_xlsx(control_file,"workflow") %>% select(-desc)
#ok, the recipe contains adstock and saturation transformation parameters or
#hyperapameter tuning selections
#but the model formula controls which terms have random slopes and which don't, and
#how many fourier terms are used
# we will tune the adstock and saturation while determining number of fft_terms to use
#read data and get names right;
data1<-data.table::fread("example2.csv") %>%
rename_columns_per_controls()%>% mutate(week=as.Date(week,"%m/%d/%Y"))
data1<-add_fourier_vars(data_to_use=data1,vc=var_controls) %>%
add_groups_and_sort(vc=var_controls)
#
recipe3<-create_recipe(data_to_use = data1,vc=var_controls,mc=transform_controls,wc=workflow_controls)
check_if_needs_tune(recipe3)
lmer(best_formula,data1)
lmer(best_formula,bake(recipe3,data1))
lmer(best_formula,data=bake(recipe,data1))
data3<-bake(recipe3,data1)
hyper_parms_finalized<-recipe3 %>% finalize_recipe(hyper_parms)
data3<-bake(recipe3,data1)
data3<-bake(hyper_parms_finalized,data1)
recipe3 %>% finalize_recipe(hyper_parms)
hyper_parms_finalized<-recipe3 %>% finalize_recipe(hyper_parms)
data3<-bake(hyper_parms_finalized,data1)
prep(hyper_parms_finalized)
data3<-bake(hyper_parms_finalized %>% prep(),data1)
lmer(best_formula,data=data3)
m1<-lmer(best_formula,data=data3)
rsq(m1)
data3$pred=predict(m1)
?rsq
rsq(data3,sales,pred)
mape(data3,sales,pred)
mae(data3,sales,pred)
rmse(data3,sales,pred)
mse(data3,sales,pred)
#' @param wc defaults to workflow_controls; a tibble with R_name and Value columns
#' where R_name holds control names expected by several of this package's functions
#' and Value is the value of those controls
#' @export
#'
#' @example
#'
#' @return a recipe with roles, adstock and saturation steps defined by controls table
#'
#' @importsFrom tune finalize_recipe
create_recipe<-function(data_to_use=data1,vc=var_controls,mc=transform_controls,
wc=workflow_controls){
#start recipe by assigning roles
#  small data is good, going to need to loop over recipe repeatedly, lots of internal copying
# if(adding_trend){
#   #identifyt he time variable and flag if more than 1
#   vc |> filter(role2=='trend',role=='time_id') |> select(varname) |> unlist()->trend_vars
#   if(length(trend_vars)>1){stop('control file asks to add a centered trend but two variables are defined as time predictors.\nCheck the variables tab for role2="trend", role="time_id" and make sure only a single variable is listed' )}
#   if(length(trend_vars)==0){stop('control file asks to add a centered trend but no variable has role="time_id" and role2 = "trend".')}
#   # column_to_change<-data_to_use |>ungroup() |>  select(!!trend_vars) |> unlist() |> as.numeric()
#   # data_to_use[trend_vars]<-column_to_change
# }
groupings<-as.character(groups(data_to_use))
recipe0<-recipe(head(data_to_use,n=1) )
recipe1<-recipe0 |> bulk_update_role() |> bulk_add_role()
# if(adding_trend){
#   recipe1<-recipe1 |> add_role(has_role('trend'),new_role='predictor')# |> step_center(has_role='trend')
# }else{
# #   #this will remove the trend term from forumals down stream
#   recipe1<-recipe1 |> update_role(has_role('trend'),new_role='time',old_role='trend')
# }
recipe2<-recipe1 |> add_steps_media(var_specific_controls=vc,media_controls=mc) |>  step_select(-has_role('postprocess'))
##TODO: test all variations of tune vs fixed -- test alpha, e.g.
recipe3 <-recipe2  |># step_center(week) |>
update_role(c(sin1,sin2,sin3,sin4,sin5,cos1,cos2,cos3,cos4,cos5),new_role='time') |>
add_role(c(sin1,sin2,sin3,sin4,sin5,cos1,cos2,cos3,cos4,cos5),new_role='predictor') |>
step_novel(all_of(!!groupings)) |>
step_mutate_at(all_of(!!groupings),fn=list(id=as.integer))
if(get_control('tune_this_time',wc)=='FALSE'){
if(check_if_needs_tune(recipe3)){
if(get_control('saved_hypers_filename') =='' |
is.na(get_control('saved_hypers_filename') ) ){
stop("workflow controls calling for skipping tuning but the saved_hypers_filename control is empty!
Fill that control in with the location of saved hyperparameters")
}
recipe3<-recipe3|>tune::finalize_recipe(readRDS(get_control('saved_hypers_filename',wc)))
}
}
return(recipe3)
}
#
recipe3<-create_recipe(data_to_use = data1,vc=var_controls,mc=transform_controls,wc=workflow_controls)
check_if_needs_tune(recipe3)
workflow_controls
rm(recipe3)
#model discovery walk through
#TODO: add the random effects bit to a function
#TODO: add the hyper pararms  + seasonality part to a funciton
#TODO: make a function to start a control file from a data table
#devtools::install_local('C:\\Users\\loren\\Documents\\R\\mostlytidyMMM',force=T)
setwd('C:\\Users\\loren\\Documents\\R\\tidymmm')
librarian::shelf(tidymodels,tune,recipes,multilevelmod,tidyverse,arrow,workflowsets,rethinking,rstan)
#source('tidymodels methods.R')
library(mostlytidyMMM)
source('mmm functions reducing.R')
control_file<-'example_model_control_stages.xlsx'
#get control spreadsheet
#var_controls -- must have 1 and only 1 role=time_id record
#TODO: write function to perform checkcs on control file: 1) 1 outcome 2) role and role 2 assignment checks 3)
var_controls<-readxl::read_xlsx(control_file,'variables')
transform_controls<-readxl::read_xlsx(control_file,'role controls')
workflow_controls<-readxl::read_xlsx(control_file,"workflow") %>% select(-desc)
#ok, the recipe contains adstock and saturation transformation parameters or
#hyperapameter tuning selections
#but the model formula controls which terms have random slopes and which don't, and
#how many fourier terms are used
# we will tune the adstock and saturation while determining number of fft_terms to use
#read data and get names right;
data1<-data.table::fread("example2.csv") %>%
rename_columns_per_controls()%>% mutate(week=as.Date(week,"%m/%d/%Y"))
data1<-add_fourier_vars(data_to_use=data1,vc=var_controls) %>%
add_groups_and_sort(vc=var_controls)
#
recipe3<-create_recipe(data_to_use = data1,vc=var_controls,mc=transform_controls,wc=workflow_controls)
recipe3
prep(recipe3)
check_if_needs_tune(recipe3)
#model discovery walk through
#TODO: add the random effects bit to a function
#TODO: add the hyper pararms  + seasonality part to a funciton
#TODO: make a function to start a control file from a data table
#devtools::install_local('C:\\Users\\loren\\Documents\\R\\mostlytidyMMM',force=T)
setwd('C:\\Users\\loren\\Documents\\R\\tidymmm')
librarian::shelf(tidymodels,tune,recipes,multilevelmod,tidyverse,arrow,workflowsets,rethinking,rstan)
#source('tidymodels methods.R')
library(mostlytidyMMM)
source('mmm functions reducing.R')
control_file<-'example_model_control_stages.xlsx'
#get control spreadsheet
#var_controls -- must have 1 and only 1 role=time_id record
#TODO: write function to perform checkcs on control file: 1) 1 outcome 2) role and role 2 assignment checks 3)
var_controls<-readxl::read_xlsx(control_file,'variables')
transform_controls<-readxl::read_xlsx(control_file,'role controls')
workflow_controls<-readxl::read_xlsx(control_file,"workflow") %>% select(-desc)
#ok, the recipe contains adstock and saturation transformation parameters or
#hyperapameter tuning selections
#but the model formula controls which terms have random slopes and which don't, and
#how many fourier terms are used
# we will tune the adstock and saturation while determining number of fft_terms to use
#read data and get names right;
data1<-data.table::fread("example2.csv") %>%
rename_columns_per_controls()%>% mutate(week=as.Date(week,"%m/%d/%Y"))
data1<-add_fourier_vars(data_to_use=data1,vc=var_controls) %>%
add_groups_and_sort(vc=var_controls)
#
recipe3<-create_recipe(data_to_use = data1,vc=var_controls,mc=transform_controls,wc=workflow_controls)
recipe3
check_if_needs_tune(recipe3)
